//My solution for https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/cash-register


function checkCashRegister(price, cash, cid) {
  let change = cash - price;
  
  //check if total in cid equals change, return status closed if true
  let cidTotal = 0;
  cid.map(x => {
    cidTotal += x[1];
  })
  if (change == cidTotal){
    return {status: "CLOSED", change: cid};
  }
  //denomination is to tally change by each denomination value
  let denomination = [100, 20, 10, 5, 1, 0.25, 0.10, 0.05, 0.01];
  //cid reversed to tally change by largest denomination first
  let cidRev = cid.reverse();
  //cashBack will store final change returned in function
  let cashBack = [];
  //cashBack starts with all denom values set at 0. Each denom updated or removed before final return.
  for (let i = 0; i < cidRev.length; i++){
    cashBack.push([cidRev[i][0], 0]);  
  }
  console.log(change); 
  //iterate through each denom and update var change (how much change still needs to be given)
  //var cidRev[i][1](how much cash is still left for each denom)
  //var cashBack[i][1](how much cash has been given for each denom)
  //while loop ends if no more change needs to be given or the denom is either too big/none left
  //for loop iterates for all denoms
  for (let i = 0; i < cidRev.length; i++){
    while (change > 0 && denomination[i] <= change && cidRev[i][1] > 0){
      change -= denomination[i];
      cidRev[i][1] -= denomination[i];
      cashBack[i][1] += denomination[i];
    }
  }
  //check if change was reduced to 0. If not, then cidRev doesn't have necessary denoms
  //to give full change back so declare insufficient funds
  console.log(change);  
  console.log(cashBack[8]);  
  if (change > 0.01){
    return {status: "INSUFFICIENT_FUNDS", change: []}

  }
  //to account for floating point weirdness not properly counting the last 0.01
  if (change > 0 && change < 0.01){
    cashBack[8][1] += 0.01;
  }
  //remove any elements in cashBack if value is equal to 0 i.e. no change given in that denom
  for (let i = 0; i < cashBack.length; i++){
    if (cashBack[i][1] == 0){
      cashBack.splice(i,1);
      i--;
    }
  }

  //return change    
  return {status: "OPEN", change: cashBack};
}
